{"ast":null,"code":"/**\n * @typedef {import('mdast').AlignType} AlignType\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n *\n * @typedef Options\n * @property {boolean} [tableCellPadding=true]\n * @property {boolean} [tablePipeAlign=true]\n * @property {MarkdownTableOptions['stringLength']} [stringLength]\n */\nimport { containerPhrasing } from 'mdast-util-to-markdown/lib/util/container-phrasing.js';\nimport { inlineCode } from 'mdast-util-to-markdown/lib/handle/inline-code.js';\nimport { markdownTable } from 'markdown-table';\n/** @type {FromMarkdownExtension} */\n\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n};\n/** @type {FromMarkdownHandle} */\n\nfunction enterTable(token) {\n  /** @type {Array<'left'|'right'|'center'|'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align;\n  this.enter({\n    type: 'table',\n    align: align.map(d => d === 'none' ? null : d),\n    children: []\n  }, token);\n  this.setData('inTable', true);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitTable(token) {\n  this.exit(token);\n  this.setData('inTable');\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction enterRow(token) {\n  this.enter({\n    type: 'tableRow',\n    children: []\n  }, token);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exit(token) {\n  this.exit(token);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction enterCell(token) {\n  this.enter({\n    type: 'tableCell',\n    children: []\n  }, token);\n} // Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitCodeText(token) {\n  let value = this.resume();\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace);\n  }\n\n  const node =\n  /** @type {InlineCode} */\n  this.stack[this.stack.length - 1];\n  node.value = value;\n  this.exit(token);\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\n\n\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\n\n\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {};\n  const padding = settings.tableCellPadding;\n  const alignDelimiters = settings.tablePipeAlign;\n  const stringLength = settings.stringLength;\n  const around = padding ? ' ' : '|';\n  return {\n    unsafe: [{\n      character: '\\r',\n      inConstruct: 'tableCell'\n    }, {\n      character: '\\n',\n      inConstruct: 'tableCell'\n    }, // A pipe, when followed by a tab or space (padding), or a dash or colon\n    // (unpadded delimiter row), could result in a table.\n    {\n      atBreak: true,\n      character: '|',\n      after: '[\\t :-]'\n    }, // A pipe in a cell must be encoded.\n    {\n      character: '|',\n      inConstruct: 'tableCell'\n    }, // A colon must be followed by a dash, in which case it could start a\n    // delimiter row.\n    {\n      atBreak: true,\n      character: ':',\n      after: '-'\n    }, // A delimiter row can also start with a dash, when followed by more\n    // dashes, a colon, or a pipe.\n    // This is a stricter version than the built in check for lists, thematic\n    // breaks, and setex heading underlines though:\n    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n    {\n      atBreak: true,\n      character: '-',\n      after: '[:|-]'\n    }],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  };\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(handleTableAsData(node, context, safeOptions), // @ts-expect-error: fixed in `markdown-table@3.0.1`.\n    node.align);\n  }\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n\n\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions); // `markdown-table` will always add an align row\n\n    const value = serializeData([row]);\n    return value.slice(0, value.indexOf('\\n'));\n  }\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n\n\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell');\n    const subexit = context.enter('phrasing');\n    const value = containerPhrasing(node, context, { ...safeOptions,\n      before: around,\n      after: around\n    });\n    subexit();\n    exit();\n    return value;\n  }\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string>} [align]\n   */\n\n\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      alignDelimiters,\n      padding,\n      stringLength\n    });\n  }\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n\n\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children;\n    let index = -1;\n    /** @type {Array<Array<string>>} */\n\n    const result = [];\n    const subexit = context.enter('table');\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], context, safeOptions);\n    }\n\n    subexit();\n    return result;\n  }\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n\n\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children;\n    let index = -1;\n    /** @type {Array<string>} */\n\n    const result = [];\n    const subexit = context.enter('tableRow');\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, context, safeOptions);\n    }\n\n    subexit();\n    return result;\n  }\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n\n\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context);\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&');\n    }\n\n    return value;\n  }\n}","map":{"version":3,"sources":["/home/mash/Documents/Code/JavaScript/pl-md-resume/node_modules/mdast-util-gfm-table/index.js"],"names":["containerPhrasing","inlineCode","markdownTable","gfmTableFromMarkdown","enter","table","enterTable","tableData","enterCell","tableHeader","tableRow","enterRow","exit","codeText","exitCodeText","exitTable","token","align","_align","type","map","d","children","setData","value","resume","getData","replace","node","stack","length","$0","$1","gfmTableToMarkdown","options","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","unsafe","character","inConstruct","atBreak","after","handlers","handleTable","handleTableRow","tableCell","handleTableCell","inlineCodeWithTable","_","context","safeOptions","serializeData","handleTableAsData","row","handleTableRowAsData","slice","indexOf","subexit","before","matrix","index","result","parent","includes"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('mdast').AlignType} AlignType\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n *\n * @typedef Options\n * @property {boolean} [tableCellPadding=true]\n * @property {boolean} [tablePipeAlign=true]\n * @property {MarkdownTableOptions['stringLength']} [stringLength]\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterTable(token) {\n  /** @type {Array<'left'|'right'|'center'|'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/** @type {FromMarkdownHandle} */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      // @ts-expect-error: fixed in `markdown-table@3.0.1`.\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    // `markdown-table` will always add an align row\n    const value = serializeData([row])\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string>} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      alignDelimiters,\n      padding,\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n"]},"metadata":{},"sourceType":"module"}