{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\nimport { ok as assert } from 'uvu/assert';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst own = {}.hasOwnProperty;\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\n\nexport function gfmFootnoteHtml() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const label = options.label || 'Footnotes';\n  const backLabel = options.backLabel || 'Back to content';\n  const clobberPrefix = options.clobberPrefix === undefined || options.clobberPrefix === null ? 'user-content-' : options.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack =\n        /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        stack.push(false);\n      },\n\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions =\n        /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions');\n        const footnoteStack =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n        const tightStack =\n        /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n        assert(current, 'expected to be in a footnote');\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true); // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n\n        this.setData('lastWasTag');\n      },\n\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n\n        this.buffer(); // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls =\n        /** @type {Array<string>|undefined} */\n        this.getData('gfmFootnoteCallOrder');\n        let counts =\n        /** @type {Record<string, number>|undefined} */\n        this.getData('gfmFootnoteCallCounts');\n        const id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = sanitizeUri(id.toLowerCase());\n\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n\n      null() {\n        const calls =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteCallOrder') || [];\n        const counts =\n        /** @type {Record<string, number>} */\n        this.getData('gfmFootnoteCallCounts') || {};\n        const definitions =\n        /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">');\n          this.raw(this.encode(label));\n          this.tag('</h2>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = sanitizeUri(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n\n          const references = [];\n\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' + this.encode(backLabel) + '\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, (\n          /** @type {string} */\n          $0) => {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n\n    }\n  };\n}","map":{"version":3,"sources":["/home/mash/Documents/Code/JavaScript/pl-md-resume/node_modules/micromark-extension-gfm-footnote/dev/lib/html.js"],"names":["ok","assert","normalizeIdentifier","sanitizeUri","own","hasOwnProperty","gfmFootnoteHtml","options","label","backLabel","clobberPrefix","undefined","enter","gfmFootnoteDefinition","stack","getData","push","gfmFootnoteDefinitionLabelString","buffer","gfmFootnoteCallString","exit","definitions","footnoteStack","tightStack","current","pop","value","resume","setData","call","token","sliceSerialize","calls","counts","id","counter","index","indexOf","safeId","toLowerCase","length","reuseCounter","tag","String","null","lineEndingIfNeeded","raw","encode","referenceIndex","references","reference","join","injected","replace","$0"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\nexport function gfmFootnoteHtml(options = {}) {\n  const label = options.label || 'Footnotes'\n  const backLabel = options.backLabel || 'Back to content'\n  const clobberPrefix =\n    options.clobberPrefix === undefined || options.clobberPrefix === null\n      ? 'user-content-'\n      : options.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = /** @type {Array<boolean>} */ (this.getData('tightStack'))\n        stack.push(false)\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = /** @type {Record<string, string>} */ (\n          this.getData('gfmFootnoteDefinitions')\n        )\n        const footnoteStack = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteDefinitionStack')\n        )\n        const tightStack = /** @type {Array<boolean>} */ (\n          this.getData('tightStack')\n        )\n        const current = footnoteStack.pop()\n        const value = this.resume()\n\n        assert(current, 'expected to be in a footnote')\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value\n\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true)\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag')\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteDefinitionStack')\n        )\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n        this.buffer() // Get ready for a value.\n      },\n      gfmFootnoteCallString(token) {\n        let calls = /** @type {Array<string>|undefined} */ (\n          this.getData('gfmFootnoteCallOrder')\n        )\n        let counts = /** @type {Record<string, number>|undefined} */ (\n          this.getData('gfmFootnoteCallCounts')\n        )\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n        let counter\n\n        this.resume()\n\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n\n        const reuseCounter = counts[id]\n\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n      null() {\n        const calls = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteCallOrder') || []\n        )\n        const counts = /** @type {Record<string, number>} */ (\n          this.getData('gfmFootnoteCallCounts') || {}\n        )\n        const definitions = /** @type {Record<string, string>} */ (\n          this.getData('gfmFootnoteDefinitions') || {}\n        )\n        let index = -1\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">'\n          )\n          this.raw(this.encode(label))\n          this.tag('</h2>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n          const references = []\n\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' +\n                this.encode(backLabel) +\n                '\">↩' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n\n          const reference = references.join(' ')\n          let injected = false\n\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (/** @type {string} */ $0) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}