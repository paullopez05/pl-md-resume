{"ast":null,"code":"/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|Array<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn‚Äôt place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its ‚Äúvisible‚Äù size.\n *   Note that what is and isn‚Äôt visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['‰∏≠Êñá', 'Charlie'],\n *     ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | ‰∏≠Êñá | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë© | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['‰∏≠Êñá', 'Charlie'],\n *       ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | ‰∏≠Êñá  | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë©    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {Array<Array<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const align = (options.align || []).concat();\n  const stringLength = options.stringLength || defaultStringLength;\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n\n  const alignments = [];\n  /** @type {Array<Array<string>>} Cells per row. */\n\n  const cellMatrix = [];\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n\n  const sizeMatrix = [];\n  /** @type {Array<number>} */\n\n  const longestCellByColumn = [];\n  let mostCellsPerRow = 0;\n  let rowIndex = -1; // This is a superfluous loop if we don‚Äôt align delimiters, but otherwise we‚Äôd\n  // do superfluous work when aligning, so optimize for aligning.\n\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = [];\n    /** @type {Array<number>} */\n\n    const sizes = [];\n    let columnIndex = -1;\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length;\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex]);\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell);\n        sizes[columnIndex] = size;\n\n        if (longestCellByColumn[columnIndex] === undefined || size > longestCellByColumn[columnIndex]) {\n          longestCellByColumn[columnIndex] = size;\n        }\n      }\n\n      row.push(cell);\n    }\n\n    cellMatrix[rowIndex] = row;\n    sizeMatrix[rowIndex] = sizes;\n  } // Figure out which alignments to use.\n\n\n  let columnIndex = -1;\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex]);\n    }\n  } else {\n    const code = toAlignment(align);\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code;\n    }\n  } // Inject the alignment row.\n\n\n  columnIndex = -1;\n  /** @type {Array<string>} */\n\n  const row = [];\n  /** @type {Array<number>} */\n\n  const sizes = [];\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex];\n    let before = '';\n    let after = '';\n\n    if (code === 99\n    /* `c` */\n    ) {\n      before = ':';\n      after = ':';\n    } else if (code === 108\n    /* `l` */\n    ) {\n      before = ':';\n    } else if (code === 114\n    /* `r` */\n    ) {\n      after = ':';\n    } // There *must* be at least one hyphen-minus in each alignment cell.\n\n\n    let size = options.alignDelimiters === false ? 1 : Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length);\n    const cell = before + '-'.repeat(size) + after;\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length;\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size;\n      }\n\n      sizes[columnIndex] = size;\n    }\n\n    row[columnIndex] = cell;\n  } // Inject the alignment row.\n\n\n  cellMatrix.splice(1, 0, row);\n  sizeMatrix.splice(1, 0, sizes);\n  rowIndex = -1;\n  /** @type {Array<string>} */\n\n  const lines = [];\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex];\n    const sizes = sizeMatrix[rowIndex];\n    columnIndex = -1;\n    /** @type {Array<string>} */\n\n    const line = [];\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || '';\n      let before = '';\n      let after = '';\n\n      if (options.alignDelimiters !== false) {\n        const size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);\n        const code = alignments[columnIndex];\n\n        if (code === 114\n        /* `r` */\n        ) {\n          before = ' '.repeat(size);\n        } else if (code === 99\n        /* `c` */\n        ) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5);\n            after = ' '.repeat(size / 2 - 0.5);\n          } else {\n            before = ' '.repeat(size / 2);\n            after = before;\n          }\n        } else {\n          after = ' '.repeat(size);\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|');\n      }\n\n      if (options.padding !== false && // Don‚Äôt add the opening space if we‚Äôre not aligning and the cell is\n      // empty: there will be a closing space.\n      !(options.alignDelimiters === false && cell === '') && (options.delimiterStart !== false || columnIndex)) {\n        line.push(' ');\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before);\n      }\n\n      line.push(cell);\n\n      if (options.alignDelimiters !== false) {\n        line.push(after);\n      }\n\n      if (options.padding !== false) {\n        line.push(' ');\n      }\n\n      if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {\n        line.push('|');\n      }\n    }\n\n    lines.push(options.delimiterEnd === false ? line.join('').replace(/ +$/, '') : line.join(''));\n  }\n\n  return lines.join('\\n');\n}\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\n\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value);\n}\n/**\n * @param {string} value\n * @returns {number}\n */\n\n\nfunction defaultStringLength(value) {\n  return value.length;\n}\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\n\n\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0;\n  return code === 67\n  /* `C` */\n  || code === 99\n  /* `c` */\n  ? 99\n  /* `c` */\n  : code === 76\n  /* `L` */\n  || code === 108\n  /* `l` */\n  ? 108\n  /* `l` */\n  : code === 82\n  /* `R` */\n  || code === 114\n  /* `r` */\n  ? 114\n  /* `r` */\n  : 0;\n}","map":{"version":3,"sources":["/home/mash/Documents/Code/JavaScript/pl-md-resume/node_modules/markdown-table/index.js"],"names":["markdownTable","table","options","align","concat","stringLength","defaultStringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","length","row","sizes","columnIndex","cell","serialize","alignDelimiters","size","undefined","push","toAlignment","code","before","after","Math","max","repeat","splice","lines","line","delimiterStart","padding","delimiterEnd","join","replace","value","String","codePointAt"],"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","sourcesContent":["/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|Array<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn‚Äôt place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its ‚Äúvisible‚Äù size.\n *   Note that what is and isn‚Äôt visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['‰∏≠Êñá', 'Charlie'],\n *     ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | ‰∏≠Êñá | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë© | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['‰∏≠Êñá', 'Charlie'],\n *       ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | ‰∏≠Êñá  | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë©    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {Array<Array<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don‚Äôt align delimiters, but otherwise we‚Äôd\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don‚Äôt add the opening space if we‚Äôre not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n"]},"metadata":{},"sourceType":"module"}